<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:adonis="clr-namespace:AdonisUI;assembly=AdonisUI"
    xmlns:adonisEx="clr-namespace:AdonisUI.Extensions;assembly=AdonisUI"
    xmlns:local="clr-namespace:MyHealth">

    <!--  ____________________________________________ TextBlocks ______________________  -->
    <!--  Page Title  -->
    <Style x:Key="Texts.PageTitle" TargetType="TextBlock">
        <Setter Property="Text" Value="This is sample text" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource NormalTextColor}" />
    </Style>
    <Style
        x:Key="Texts.PageTitle.Negative"
        BasedOn="{StaticResource Texts.PageTitle}"
        TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource BackgroundColor}" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>

    <!--  NormalText  -->
    <Style x:Key="Texts.NormalText" TargetType="TextBlock">
        <Setter Property="Padding" Value="0,5" />
        <Setter Property="Foreground" Value="{DynamicResource NormalTextColor}" />
        <Setter Property="FontSize" Value="12" />
    </Style>
    <Style x:Key="Texts.CaptionText" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource NormalTextColor}" />
        <Setter Property="FontSize" Value="16" />
    </Style>
    <Style
        x:Key="Texts.SmallTitle"
        BasedOn="{StaticResource Texts.NormalText}"
        TargetType="TextBlock">
        <Setter Property="FontWeight" Value="Bold" />
    </Style>
    <Style
        x:Key="Texts.BigTitle"
        BasedOn="{StaticResource Texts.NormalText}"
        TargetType="TextBlock">
        <Setter Property="FontSize" Value="24" />
    </Style>

    <!--  ____________________________________________ Icon Styles ______________________  -->

    <!--  CheckMark Icon  -->
    <Path
        x:Key="CheckMarkIcon"
        Width="10"
        Data="{StaticResource CheckMark}"
        Fill="{DynamicResource Menu.Icons}"
        Stretch="Uniform" />

    <!--  Mute Icon  -->
    <Path
        x:Key="MuteIcon"
        Width="25"
        Data="{StaticResource Mute}"
        Fill="{DynamicResource BackgroundColor}"
        Stretch="Uniform" />

    <!--  ____________________________________________ Adonis Buttons ______________________  -->
    <!--  Base Button  -->
    <Style
        x:Key="Buttons.Base"
        BasedOn="{StaticResource {x:Type Button}}"
        TargetType="Button">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="adonisEx:CornerRadiusExtension.CornerRadius" Value="{StaticResource Buttons.CornerRadius}" />
        <Setter Property="Cursor" Value="Hand" />

    </Style>

    <!--  CTA Button  -->
    <Style
        x:Key="Buttons.CTA"
        BasedOn="{StaticResource {x:Static adonis:Styles.AccentButton}}"
        TargetType="Button">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="adonisEx:CornerRadiusExtension.CornerRadius" Value="{StaticResource Buttons.CornerRadius}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Padding" Value="{adonis:Space 4, 0.75}" />
    </Style>

    <!--  Secondary Buttons  -->
    <Style
        x:Key="Buttons.Secondary"
        BasedOn="{StaticResource Buttons.Base}"
        TargetType="Button">
        <Setter Property="Padding" Value="{adonis:Space 3, 0.75}" />
    </Style>

    <!--  Tritary Buttons  -->
    <Style
        x:Key="Buttons.Tritary"
        BasedOn="{StaticResource Buttons.Base}"
        TargetType="Button">
        <Setter Property="Padding" Value="{adonis:Space 2, 0.75}" />
    </Style>

    <!--  ____________________________________________ My Buttons ______________________  -->
    <!--  Masked Button  -->
    <Style x:Key="Buttons.MaskedButtonBase" TargetType="Button">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{DynamicResource Buttons.CornerRadius}">
                        <Border
                            x:Name="mask"
                            Padding="{TemplateBinding Padding}"
                            Background="Transparent"
                            CornerRadius="{DynamicResource Buttons.CornerRadius}">
                            <ContentPresenter
                                Grid.Row="2"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="mask" Property="Background" Value="{DynamicResource Buttons.Masked.Hover}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="mask" Property="Background" Value="{DynamicResource Buttons.Masked.Pressed}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Glass Buttons  -->
    <Style
        x:Key="Buttons.GlassButton"
        BasedOn="{StaticResource Buttons.MaskedButtonBase}"
        TargetType="Button">
        <Setter Property="Width" Value="50" />
        <Setter Property="Height" Value="50" />
        <Setter Property="Background" Value="{DynamicResource Buttons.Glass.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource BackgroundColor}" />
    </Style>



    <!--  Icon Buttons  -->
    <Style x:Key="Buttons.OnlyIcon" TargetType="Button">
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Buttons.OnlyIcon.Hover}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ____________________________________________ Menu Styles ______________________  -->
    <!--  Context Menu  -->
    <Style x:Key="ContextMenu.BgBorder" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource Menu.Border}" />
        <Setter Property="CornerRadius" Value="{DynamicResource Menu.CornerRadius}" />
        <Setter Property="Padding" Value="0,5" />
    </Style>
    <Style TargetType="ContextMenu">
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Border Style="{StaticResource ContextMenu.BgBorder}">
                        <StackPanel
                            ClipToBounds="True"
                            IsItemsHost="True"
                            Orientation="Vertical" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Menu Item  -->
    <Style TargetType="MenuItem">
        <Setter Property="MinWidth" Value="160" />
        <Setter Property="Background" Value="{DynamicResource Menu.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Menu.TextColor}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Height" Value="24" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <Grid>
                            <!--  Columns  -->
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="24" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="24" />
                            </Grid.ColumnDefinitions>

                            <!--  Sub Menu Popup  -->
                            <Popup
                                x:Name="Popup"
                                AllowsTransparency="True"
                                IsOpen="{TemplateBinding IsSubmenuOpen}"
                                Placement="Right">
                                <Border Margin="3,0,0,0" Style="{StaticResource ContextMenu.BgBorder}">
                                    <StackPanel
                                        ClipToBounds="True"
                                        IsItemsHost="True"
                                        Orientation="Vertical" />
                                </Border>
                            </Popup>

                            <!--  Menuitem Icon  -->
                            <ContentPresenter x:Name="icon" ContentSource="Icon" />

                            <!--  CheckMark if MenuItem isChackable  -->
                            <ContentControl
                                x:Name="checkMark"
                                Content="{StaticResource CheckMarkIcon}"
                                Visibility="Collapsed" />

                            <!--  Main Content  -->
                            <ContentPresenter
                                Grid.Column="1"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                ContentSource="Header" />

                            <!--  Right Submenu arrow icon  -->
                            <Path
                                x:Name="indicator"
                                Grid.Column="2"
                                Width="4.5"
                                Data="{StaticResource ArrowRightIndicator}"
                                Fill="{TemplateBinding Foreground}"
                                Stretch="Uniform" />


                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--  Hover  -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource Menu.Hover}" />
                        </Trigger>

                        <!--  Pressed  -->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource Menu.Pressed}" />
                        </Trigger>

                        <!--  Disabled  -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <!--  Has Submenu  -->
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="indicator" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <!--  Show Checkmark if isCheckble and no icon setted  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsCheckable" Value="true" />
                                <Condition Property="IsChecked" Value="true" />
                                <Condition Property="Icon" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="checkMark" Property="Visibility" Value="Visible" />
                                <Setter TargetName="icon" Property="Visibility" Value="Collapsed" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Menu Seperator  -->
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
        <Setter Property="Padding" Value="0,5" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Menu.Border}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <Rectangle Height="1" Fill="{TemplateBinding Foreground}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--  ____________________________________________ MainWindow Menu Style ______________________  -->

    <!--  Setting Icon  -->
    <Path
        x:Key="SettingIcon"
        Width="32"
        Data="{StaticResource Setting}"
        Fill="{DynamicResource IconsColor.Settings}"
        Stretch="Uniform" />

    <!--  Restart Icon  -->
    <Path
        x:Key="RestartIcon"
        Width="32"
        Data="{StaticResource Restart}"
        Fill="{DynamicResource Menu.Icons}"
        Stretch="Uniform" />

    <!--  Pause and Play Icons  -->
    <Path
        x:Key="PlayPauseMenuItem.PlayIcon"
        Width="32"
        Data="{StaticResource Continue}"
        Fill="{DynamicResource IconsColor.Play}"
        Stretch="Uniform" />
    <Path
        x:Key="PlayPauseMenuItem.PauseIcon"
        Width="32"
        Data="{StaticResource Stop}"
        Fill="{DynamicResource IconsColor.Pause}"
        Stretch="Uniform" />

    <!--  Close Icon  -->
    <Path
        x:Key="CloseIcon"
        Width="24"
        Data="{StaticResource Close}"
        Fill="{DynamicResource IconsColor.Settings}"
        Stretch="Uniform" />

    <!--  Lock And Unlock Icons  -->
    <Path
        x:Key="LockMenuItem.LockIcon"
        Width="32"
        Data="{StaticResource Lock}"
        Fill="{DynamicResource IconsColor.Lock}"
        Stretch="Uniform" />
    <Path
        x:Key="LockMenuItem.UnLockIcon"
        Width="32"
        Data="{StaticResource UnLock}"
        Fill="{DynamicResource IconsColor.Lock}"
        Stretch="Uniform" />


    <!--  MenuItems Style  -->
    <Style x:Key="MainWindow.Menu.MenuItemStyle" TargetType="MenuItem">
        <Setter Property="MinWidth" Value="64" />
        <Setter Property="MinHeight" Value="64" />
        <Setter Property="Background" Value="{DynamicResource Menu.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Menu.TextColor}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="10" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <Grid>
                            <!--  Rows  -->
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="auto" />
                            </Grid.RowDefinitions>

                            <!--  Sub Menu Popup  -->
                            <Popup
                                x:Name="Popup"
                                AllowsTransparency="True"
                                IsOpen="{TemplateBinding IsSubmenuOpen}"
                                Placement="Right">
                                <Border Margin="3,0,0,0" Style="{StaticResource ContextMenu.BgBorder}">
                                    <StackPanel
                                        ClipToBounds="True"
                                        IsItemsHost="True"
                                        Orientation="Vertical" />
                                </Border>
                            </Popup>

                            <!--  Menuitem Icon  -->
                            <ContentPresenter
                                x:Name="icon"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                ContentSource="Icon" />

                            <!--  Main Content  -->
                            <ContentPresenter
                                Grid.Row="1"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                ContentSource="Header" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--  Hover  -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource Menu.Hover}" />
                        </Trigger>

                        <!--  Pressed  -->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource Menu.Pressed}" />
                        </Trigger>

                        <!--  Disabled  -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.3" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Play Pause Menuitem  -->
    <Style
        x:Key="PlayPauseMenuItem.Style"
        BasedOn="{StaticResource MainWindow.Menu.MenuItemStyle}"
        TargetType="MenuItem">
        <Setter Property="IsCheckable" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Icon" Value="{StaticResource PlayPauseMenuItem.PlayIcon}" />
                <Setter Property="Header" Value="Continue" />
            </Trigger>

            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Icon" Value="{StaticResource PlayPauseMenuItem.PauseIcon}" />
                <Setter Property="Header" Value="Pause" />

            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Lock Menuitem  -->
    <Style
        x:Key="LockMenuItem.Style"
        BasedOn="{StaticResource MainWindow.Menu.MenuItemStyle}"
        TargetType="MenuItem">
        <Setter Property="IsCheckable" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Icon" Value="{StaticResource LockMenuItem.LockIcon}" />
                <Setter Property="Header" Value="Locked" />
            </Trigger>

            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Icon" Value="{StaticResource LockMenuItem.UnLockIcon}" />
                <Setter Property="Header" Value="UnLocked" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--  ____________________________________________ Custom Styles ______________________  -->
    <!--  Step Data MenuItem  -->
    <Style x:Key="StepData.MenuItemIcon" TargetType="Path">
        <Setter Property="Stretch" Value="Uniform" />
        <Setter Property="Width" Value="14" />
    </Style>
    <Style
        x:Key="StepData.MenuItem"
        BasedOn="{StaticResource {x:Type MenuItem}}"
        TargetType="MenuItem">
        <Setter Property="IsCheckable" Value="True" />
        <Setter Property="BorderBrush" Value="{DynamicResource StepData.MenuItem.IconColor}" />
        <Setter Property="Padding" Value="3,0,10,0" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="BorderBrush" Value="{DynamicResource StepData.MenuItem.SelectionColor}" />
                <Setter Property="Foreground" Value="{DynamicResource StepData.MenuItem.SelectionColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Expander Style  -->
    <Style x:Key="Expander.ToggleButton" TargetType="ToggleButton">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Background" Value="{DynamicResource {x:Static adonis:Brushes.Layer0BackgroundBrush}}" />
        <Setter Property="Padding" Value="10,5,10,5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <Grid>
                            <!--  columns  -->
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>

                            <!--  Content  -->
                            <ContentPresenter />

                            <!--  Indicator  -->
                            <Path
                                x:Name="arrow"
                                Grid.Column="1"
                                Width="5"
                                VerticalAlignment="Center"
                                Data="{StaticResource ArrowRightIndicator}"
                                Fill="{DynamicResource Buttons.OnlyIcon.IconColor}"
                                Stretch="Uniform" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static adonis:Brushes.Layer1HighlightBrush}}" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="arrow" Property="Data" Value="{StaticResource ArrowDown}" />
                            <Setter TargetName="arrow" Property="Width" Value="9" />

                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Expander">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static adonis:Brushes.ForegroundBrush}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <Grid>
                            <!--  rows  -->
                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <!--  Expand and collapse Toggle Button  -->
                            <ToggleButton IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Style="{StaticResource Expander.ToggleButton}">
                                <!--  Header  -->
                                <ContentPresenter Content="{TemplateBinding Header}" />
                            </ToggleButton>

                            <!--  Content  -->

                            <ContentPresenter x:Name="content" Grid.Row="1" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--  Hide Content When IsExpanded Set to false  -->
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="content" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Timer Border  -->
    <Style x:Key="Main.TimerBorder" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource Timer.Background}" />
        <Setter Property="CornerRadius" Value="{DynamicResource Timer.CornerRadius}" />
        <Setter Property="Padding" Value="5,0" />
        <Setter Property="BorderBrush" Value="{DynamicResource Timer.Border}" />
        <Setter Property="BorderThickness" Value="1,1,1,0" />
    </Style>

    <!--  Settings Window TabControl  -->
    <Style x:Key="TabControl.ItemStyle" TargetType="TabItem">
        <Setter Property="Padding" Value="20,10" />
        <Setter Property="MinWidth" Value="140" />
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Header}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SettingWindow.TabItem.Hover}" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="IsFocused" Value="false" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Foreground" Value="{DynamicResource SettingWindow.TabItem.SelectionColor}" />
                                <Setter Property="Background" Value="{DynamicResource BackgroundColor}" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="IsFocused" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Foreground" Value="{DynamicResource BackgroundColor}" />
                                <Setter Property="Background" Value="{DynamicResource SettingWindow.TabItem.SelectionColor}" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    <Style x:Key="TabControlStyle" TargetType="TabControl">
        <Setter Property="TabStripPlacement" Value="left" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource TabControl.ItemStyle}" />
    </Style>

</ResourceDictionary>